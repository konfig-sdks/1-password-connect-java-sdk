/*
 * 1Password Connect
 * REST API interface for 1Password Connect.
 *
 * The version of the OpenAPI document: 1.5.7
 * Contact: support@1password.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;
import com.konfigthis.client.model.ModelFile;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class FilesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FilesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public FilesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getAllFilesInsideItemCall(UUID vaultUuid, UUID itemUuid, Boolean inlineFiles, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vaults/{vaultUuid}/items/{itemUuid}/files"
            .replace("{" + "vaultUuid" + "}", localVarApiClient.escapeString(vaultUuid.toString()))
            .replace("{" + "itemUuid" + "}", localVarApiClient.escapeString(itemUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (inlineFiles != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inline_files", inlineFiles));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ConnectToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllFilesInsideItemValidateBeforeCall(UUID vaultUuid, UUID itemUuid, Boolean inlineFiles, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vaultUuid' is set
        if (vaultUuid == null) {
            throw new ApiException("Missing the required parameter 'vaultUuid' when calling getAllFilesInsideItem(Async)");
        }

        // verify the required parameter 'itemUuid' is set
        if (itemUuid == null) {
            throw new ApiException("Missing the required parameter 'itemUuid' when calling getAllFilesInsideItem(Async)");
        }

        return getAllFilesInsideItemCall(vaultUuid, itemUuid, inlineFiles, _callback);

    }


    private ApiResponse<List<ModelFile>> getAllFilesInsideItemWithHttpInfo(UUID vaultUuid, UUID itemUuid, Boolean inlineFiles) throws ApiException {
        okhttp3.Call localVarCall = getAllFilesInsideItemValidateBeforeCall(vaultUuid, itemUuid, inlineFiles, null);
        Type localVarReturnType = new TypeToken<List<ModelFile>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllFilesInsideItemAsync(UUID vaultUuid, UUID itemUuid, Boolean inlineFiles, final ApiCallback<List<ModelFile>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllFilesInsideItemValidateBeforeCall(vaultUuid, itemUuid, inlineFiles, _callback);
        Type localVarReturnType = new TypeToken<List<ModelFile>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllFilesInsideItemRequestBuilder {
        private final UUID vaultUuid;
        private final UUID itemUuid;
        private Boolean inlineFiles;

        private GetAllFilesInsideItemRequestBuilder(UUID vaultUuid, UUID itemUuid) {
            this.vaultUuid = vaultUuid;
            this.itemUuid = itemUuid;
        }

        /**
         * Set inlineFiles
         * @param inlineFiles Tells server to return the base64-encoded file contents in the response. (optional)
         * @return GetAllFilesInsideItemRequestBuilder
         */
        public GetAllFilesInsideItemRequestBuilder inlineFiles(Boolean inlineFiles) {
            this.inlineFiles = inlineFiles;
            return this;
        }
        
        /**
         * Build call for getAllFilesInsideItem
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllFilesInsideItemCall(vaultUuid, itemUuid, inlineFiles, _callback);
        }


        /**
         * Execute getAllFilesInsideItem request
         * @return List&lt;ModelFile&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public List<ModelFile> execute() throws ApiException {
            ApiResponse<List<ModelFile>> localVarResp = getAllFilesInsideItemWithHttpInfo(vaultUuid, itemUuid, inlineFiles);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllFilesInsideItem request with HTTP info returned
         * @return ApiResponse&lt;List&lt;ModelFile&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<ModelFile>> executeWithHttpInfo() throws ApiException {
            return getAllFilesInsideItemWithHttpInfo(vaultUuid, itemUuid, inlineFiles);
        }

        /**
         * Execute getAllFilesInsideItem request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<ModelFile>> _callback) throws ApiException {
            return getAllFilesInsideItemAsync(vaultUuid, itemUuid, inlineFiles, _callback);
        }
    }

    /**
     * Get all the files inside an Item
     * 
     * @param vaultUuid The UUID of the Vault to fetch Items from (required)
     * @param itemUuid The UUID of the Item to fetch files from (required)
     * @return GetAllFilesInsideItemRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetAllFilesInsideItemRequestBuilder getAllFilesInsideItem(UUID vaultUuid, UUID itemUuid) throws IllegalArgumentException {
        if (vaultUuid == null) throw new IllegalArgumentException("\"vaultUuid\" is required but got null");
            

        if (itemUuid == null) throw new IllegalArgumentException("\"itemUuid\" is required but got null");
            

        return new GetAllFilesInsideItemRequestBuilder(vaultUuid, itemUuid);
    }
    private okhttp3.Call getContentCall(UUID vaultUuid, UUID itemUuid, String fileUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vaults/{vaultUuid}/items/{itemUuid}/files/{fileUuid}/content"
            .replace("{" + "vaultUuid" + "}", localVarApiClient.escapeString(vaultUuid.toString()))
            .replace("{" + "itemUuid" + "}", localVarApiClient.escapeString(itemUuid.toString()))
            .replace("{" + "fileUuid" + "}", localVarApiClient.escapeString(fileUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/octet-stream",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ConnectToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getContentValidateBeforeCall(UUID vaultUuid, UUID itemUuid, String fileUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vaultUuid' is set
        if (vaultUuid == null) {
            throw new ApiException("Missing the required parameter 'vaultUuid' when calling getContent(Async)");
        }

        // verify the required parameter 'itemUuid' is set
        if (itemUuid == null) {
            throw new ApiException("Missing the required parameter 'itemUuid' when calling getContent(Async)");
        }

        // verify the required parameter 'fileUuid' is set
        if (fileUuid == null) {
            throw new ApiException("Missing the required parameter 'fileUuid' when calling getContent(Async)");
        }

        return getContentCall(vaultUuid, itemUuid, fileUuid, _callback);

    }


    private ApiResponse<File> getContentWithHttpInfo(UUID vaultUuid, UUID itemUuid, String fileUuid) throws ApiException {
        okhttp3.Call localVarCall = getContentValidateBeforeCall(vaultUuid, itemUuid, fileUuid, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getContentAsync(UUID vaultUuid, UUID itemUuid, String fileUuid, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getContentValidateBeforeCall(vaultUuid, itemUuid, fileUuid, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetContentRequestBuilder {
        private final UUID vaultUuid;
        private final UUID itemUuid;
        private final String fileUuid;

        private GetContentRequestBuilder(UUID vaultUuid, UUID itemUuid, String fileUuid) {
            this.vaultUuid = vaultUuid;
            this.itemUuid = itemUuid;
            this.fileUuid = fileUuid;
        }

        /**
         * Build call for getContent
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  * Content-Disposition -  <br>  * Content-Length -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getContentCall(vaultUuid, itemUuid, fileUuid, _callback);
        }


        /**
         * Execute getContent request
         * @return File
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  * Content-Disposition -  <br>  * Content-Length -  <br>  </td></tr>
         </table>
         */
        public File execute() throws ApiException {
            ApiResponse<File> localVarResp = getContentWithHttpInfo(vaultUuid, itemUuid, fileUuid);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getContent request with HTTP info returned
         * @return ApiResponse&lt;File&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  * Content-Disposition -  <br>  * Content-Length -  <br>  </td></tr>
         </table>
         */
        public ApiResponse<File> executeWithHttpInfo() throws ApiException {
            return getContentWithHttpInfo(vaultUuid, itemUuid, fileUuid);
        }

        /**
         * Execute getContent request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  * Content-Disposition -  <br>  * Content-Length -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<File> _callback) throws ApiException {
            return getContentAsync(vaultUuid, itemUuid, fileUuid, _callback);
        }
    }

    /**
     * Get the content of a File
     * 
     * @param vaultUuid The UUID of the Vault the item is in (required)
     * @param itemUuid The UUID of the Item the File is in (required)
     * @param fileUuid UUID of the file to get content from (required)
     * @return GetContentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * Content-Disposition -  <br>  * Content-Length -  <br>  </td></tr>
     </table>
     */
    public GetContentRequestBuilder getContent(UUID vaultUuid, UUID itemUuid, String fileUuid) throws IllegalArgumentException {
        if (vaultUuid == null) throw new IllegalArgumentException("\"vaultUuid\" is required but got null");
            

        if (itemUuid == null) throw new IllegalArgumentException("\"itemUuid\" is required but got null");
            

        if (fileUuid == null) throw new IllegalArgumentException("\"fileUuid\" is required but got null");
            

        return new GetContentRequestBuilder(vaultUuid, itemUuid, fileUuid);
    }
    private okhttp3.Call getFileDetailsCall(UUID vaultUuid, UUID itemUuid, UUID fileUuid, Boolean inlineFiles, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vaults/{vaultUuid}/items/{itemUuid}/files/{fileUuid}"
            .replace("{" + "vaultUuid" + "}", localVarApiClient.escapeString(vaultUuid.toString()))
            .replace("{" + "itemUuid" + "}", localVarApiClient.escapeString(itemUuid.toString()))
            .replace("{" + "fileUuid" + "}", localVarApiClient.escapeString(fileUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (inlineFiles != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inline_files", inlineFiles));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ConnectToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFileDetailsValidateBeforeCall(UUID vaultUuid, UUID itemUuid, UUID fileUuid, Boolean inlineFiles, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vaultUuid' is set
        if (vaultUuid == null) {
            throw new ApiException("Missing the required parameter 'vaultUuid' when calling getFileDetails(Async)");
        }

        // verify the required parameter 'itemUuid' is set
        if (itemUuid == null) {
            throw new ApiException("Missing the required parameter 'itemUuid' when calling getFileDetails(Async)");
        }

        // verify the required parameter 'fileUuid' is set
        if (fileUuid == null) {
            throw new ApiException("Missing the required parameter 'fileUuid' when calling getFileDetails(Async)");
        }

        return getFileDetailsCall(vaultUuid, itemUuid, fileUuid, inlineFiles, _callback);

    }


    private ApiResponse<ModelFile> getFileDetailsWithHttpInfo(UUID vaultUuid, UUID itemUuid, UUID fileUuid, Boolean inlineFiles) throws ApiException {
        okhttp3.Call localVarCall = getFileDetailsValidateBeforeCall(vaultUuid, itemUuid, fileUuid, inlineFiles, null);
        Type localVarReturnType = new TypeToken<ModelFile>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getFileDetailsAsync(UUID vaultUuid, UUID itemUuid, UUID fileUuid, Boolean inlineFiles, final ApiCallback<ModelFile> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFileDetailsValidateBeforeCall(vaultUuid, itemUuid, fileUuid, inlineFiles, _callback);
        Type localVarReturnType = new TypeToken<ModelFile>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetFileDetailsRequestBuilder {
        private final UUID vaultUuid;
        private final UUID itemUuid;
        private final UUID fileUuid;
        private Boolean inlineFiles;

        private GetFileDetailsRequestBuilder(UUID vaultUuid, UUID itemUuid, UUID fileUuid) {
            this.vaultUuid = vaultUuid;
            this.itemUuid = itemUuid;
            this.fileUuid = fileUuid;
        }

        /**
         * Set inlineFiles
         * @param inlineFiles Tells server to return the base64-encoded file contents in the response. (optional)
         * @return GetFileDetailsRequestBuilder
         */
        public GetFileDetailsRequestBuilder inlineFiles(Boolean inlineFiles) {
            this.inlineFiles = inlineFiles;
            return this;
        }
        
        /**
         * Build call for getFileDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getFileDetailsCall(vaultUuid, itemUuid, fileUuid, inlineFiles, _callback);
        }


        /**
         * Execute getFileDetails request
         * @return ModelFile
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ModelFile execute() throws ApiException {
            ApiResponse<ModelFile> localVarResp = getFileDetailsWithHttpInfo(vaultUuid, itemUuid, fileUuid, inlineFiles);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getFileDetails request with HTTP info returned
         * @return ApiResponse&lt;ModelFile&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ModelFile> executeWithHttpInfo() throws ApiException {
            return getFileDetailsWithHttpInfo(vaultUuid, itemUuid, fileUuid, inlineFiles);
        }

        /**
         * Execute getFileDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ModelFile> _callback) throws ApiException {
            return getFileDetailsAsync(vaultUuid, itemUuid, fileUuid, inlineFiles, _callback);
        }
    }

    /**
     * Get the details of a File
     * 
     * @param vaultUuid The UUID of the Vault to fetch Item from (required)
     * @param itemUuid The UUID of the Item to fetch File from (required)
     * @param fileUuid The UUID of the File to fetch (required)
     * @return GetFileDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetFileDetailsRequestBuilder getFileDetails(UUID vaultUuid, UUID itemUuid, UUID fileUuid) throws IllegalArgumentException {
        if (vaultUuid == null) throw new IllegalArgumentException("\"vaultUuid\" is required but got null");
            

        if (itemUuid == null) throw new IllegalArgumentException("\"itemUuid\" is required but got null");
            

        if (fileUuid == null) throw new IllegalArgumentException("\"fileUuid\" is required but got null");
            

        return new GetFileDetailsRequestBuilder(vaultUuid, itemUuid, fileUuid);
    }
}
