/*
 * 1Password Connect
 * REST API interface for 1Password Connect.
 *
 * The version of the OpenAPI document: 1.5.7
 * Contact: support@1password.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Field;
import com.konfigthis.client.model.FullItem;
import com.konfigthis.client.model.FullItemAllOfSections;
import com.konfigthis.client.model.Item;
import com.konfigthis.client.model.ItemUrlsInner;
import com.konfigthis.client.model.ItemVault;
import com.konfigthis.client.model.ModelFile;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.PatchInner;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ItemsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ItemsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ItemsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewItemCall(String vaultUuid, FullItem fullItem, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = fullItem;

        // create path and map variables
        String localVarPath = "/vaults/{vaultUuid}/items"
            .replace("{" + "vaultUuid" + "}", localVarApiClient.escapeString(vaultUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ConnectToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewItemValidateBeforeCall(String vaultUuid, FullItem fullItem, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vaultUuid' is set
        if (vaultUuid == null) {
            throw new ApiException("Missing the required parameter 'vaultUuid' when calling createNewItem(Async)");
        }

        return createNewItemCall(vaultUuid, fullItem, _callback);

    }


    private ApiResponse<FullItem> createNewItemWithHttpInfo(String vaultUuid, FullItem fullItem) throws ApiException {
        okhttp3.Call localVarCall = createNewItemValidateBeforeCall(vaultUuid, fullItem, null);
        Type localVarReturnType = new TypeToken<FullItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewItemAsync(String vaultUuid, FullItem fullItem, final ApiCallback<FullItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewItemValidateBeforeCall(vaultUuid, fullItem, _callback);
        Type localVarReturnType = new TypeToken<FullItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewItemRequestBuilder {
        private final String vaultUuid;
        private List<String> tags;
        private String title;
        private Integer version;
        private String id;
        private ItemVault vault;
        private String category;
        private List<ItemUrlsInner> urls;
        private Boolean favorite;
        private String state;
        private OffsetDateTime createdAt;
        private OffsetDateTime updatedAt;
        private String lastEditedBy;
        private List<FullItemAllOfSections> sections;
        private List<Field> fields;
        private List<ModelFile> files;

        private CreateNewItemRequestBuilder(String vaultUuid) {
            this.vaultUuid = vaultUuid;
        }

        /**
         * Set tags
         * @param tags  (optional)
         * @return CreateNewItemRequestBuilder
         */
        public CreateNewItemRequestBuilder tags(List<String> tags) {
            this.tags = tags;
            return this;
        }
        
        /**
         * Set title
         * @param title  (optional)
         * @return CreateNewItemRequestBuilder
         */
        public CreateNewItemRequestBuilder title(String title) {
            this.title = title;
            return this;
        }
        
        /**
         * Set version
         * @param version  (optional)
         * @return CreateNewItemRequestBuilder
         */
        public CreateNewItemRequestBuilder version(Integer version) {
            this.version = version;
            return this;
        }
        
        /**
         * Set id
         * @param id  (optional)
         * @return CreateNewItemRequestBuilder
         */
        public CreateNewItemRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set vault
         * @param vault  (optional)
         * @return CreateNewItemRequestBuilder
         */
        public CreateNewItemRequestBuilder vault(ItemVault vault) {
            this.vault = vault;
            return this;
        }
        
        /**
         * Set category
         * @param category  (optional)
         * @return CreateNewItemRequestBuilder
         */
        public CreateNewItemRequestBuilder category(String category) {
            this.category = category;
            return this;
        }
        
        /**
         * Set urls
         * @param urls  (optional)
         * @return CreateNewItemRequestBuilder
         */
        public CreateNewItemRequestBuilder urls(List<ItemUrlsInner> urls) {
            this.urls = urls;
            return this;
        }
        
        /**
         * Set favorite
         * @param favorite  (optional, default to false)
         * @return CreateNewItemRequestBuilder
         */
        public CreateNewItemRequestBuilder favorite(Boolean favorite) {
            this.favorite = favorite;
            return this;
        }
        
        /**
         * Set state
         * @param state  (optional)
         * @return CreateNewItemRequestBuilder
         */
        public CreateNewItemRequestBuilder state(String state) {
            this.state = state;
            return this;
        }
        
        /**
         * Set createdAt
         * @param createdAt  (optional)
         * @return CreateNewItemRequestBuilder
         */
        public CreateNewItemRequestBuilder createdAt(OffsetDateTime createdAt) {
            this.createdAt = createdAt;
            return this;
        }
        
        /**
         * Set updatedAt
         * @param updatedAt  (optional)
         * @return CreateNewItemRequestBuilder
         */
        public CreateNewItemRequestBuilder updatedAt(OffsetDateTime updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }
        
        /**
         * Set lastEditedBy
         * @param lastEditedBy  (optional)
         * @return CreateNewItemRequestBuilder
         */
        public CreateNewItemRequestBuilder lastEditedBy(String lastEditedBy) {
            this.lastEditedBy = lastEditedBy;
            return this;
        }
        
        /**
         * Set sections
         * @param sections  (optional)
         * @return CreateNewItemRequestBuilder
         */
        public CreateNewItemRequestBuilder sections(List<FullItemAllOfSections> sections) {
            this.sections = sections;
            return this;
        }
        
        /**
         * Set fields
         * @param fields  (optional)
         * @return CreateNewItemRequestBuilder
         */
        public CreateNewItemRequestBuilder fields(List<Field> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set files
         * @param files  (optional)
         * @return CreateNewItemRequestBuilder
         */
        public CreateNewItemRequestBuilder files(List<ModelFile> files) {
            this.files = files;
            return this;
        }
        
        /**
         * Build call for createNewItem
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            FullItem fullItem = buildBodyParams();
            return createNewItemCall(vaultUuid, fullItem, _callback);
        }

        private FullItem buildBodyParams() {
            FullItem fullItem = new FullItem();
            return fullItem;
        }

        /**
         * Execute createNewItem request
         * @return FullItem
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public FullItem execute() throws ApiException {
            FullItem fullItem = buildBodyParams();
            ApiResponse<FullItem> localVarResp = createNewItemWithHttpInfo(vaultUuid, fullItem);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewItem request with HTTP info returned
         * @return ApiResponse&lt;FullItem&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FullItem> executeWithHttpInfo() throws ApiException {
            FullItem fullItem = buildBodyParams();
            return createNewItemWithHttpInfo(vaultUuid, fullItem);
        }

        /**
         * Execute createNewItem request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FullItem> _callback) throws ApiException {
            FullItem fullItem = buildBodyParams();
            return createNewItemAsync(vaultUuid, fullItem, _callback);
        }
    }

    /**
     * Create a new Item
     * 
     * @param vaultUuid The UUID of the Vault to create an Item in (required)
     * @return CreateNewItemRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewItemRequestBuilder createNewItem(String vaultUuid) throws IllegalArgumentException {
        if (vaultUuid == null) throw new IllegalArgumentException("\"vaultUuid\" is required but got null");
            

        return new CreateNewItemRequestBuilder(vaultUuid);
    }
    private okhttp3.Call deleteItemByIdCall(String vaultUuid, String itemUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vaults/{vaultUuid}/items/{itemUuid}"
            .replace("{" + "vaultUuid" + "}", localVarApiClient.escapeString(vaultUuid.toString()))
            .replace("{" + "itemUuid" + "}", localVarApiClient.escapeString(itemUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ConnectToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteItemByIdValidateBeforeCall(String vaultUuid, String itemUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vaultUuid' is set
        if (vaultUuid == null) {
            throw new ApiException("Missing the required parameter 'vaultUuid' when calling deleteItemById(Async)");
        }

        // verify the required parameter 'itemUuid' is set
        if (itemUuid == null) {
            throw new ApiException("Missing the required parameter 'itemUuid' when calling deleteItemById(Async)");
        }

        return deleteItemByIdCall(vaultUuid, itemUuid, _callback);

    }


    private ApiResponse<Void> deleteItemByIdWithHttpInfo(String vaultUuid, String itemUuid) throws ApiException {
        okhttp3.Call localVarCall = deleteItemByIdValidateBeforeCall(vaultUuid, itemUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteItemByIdAsync(String vaultUuid, String itemUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteItemByIdValidateBeforeCall(vaultUuid, itemUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteItemByIdRequestBuilder {
        private final String vaultUuid;
        private final String itemUuid;

        private DeleteItemByIdRequestBuilder(String vaultUuid, String itemUuid) {
            this.vaultUuid = vaultUuid;
            this.itemUuid = itemUuid;
        }

        /**
         * Build call for deleteItemById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successfully deleted an item </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteItemByIdCall(vaultUuid, itemUuid, _callback);
        }


        /**
         * Execute deleteItemById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successfully deleted an item </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteItemByIdWithHttpInfo(vaultUuid, itemUuid);
        }

        /**
         * Execute deleteItemById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successfully deleted an item </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteItemByIdWithHttpInfo(vaultUuid, itemUuid);
        }

        /**
         * Execute deleteItemById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Successfully deleted an item </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteItemByIdAsync(vaultUuid, itemUuid, _callback);
        }
    }

    /**
     * Delete an Item
     * 
     * @param vaultUuid The UUID of the Vault the item is in (required)
     * @param itemUuid The UUID of the Item to update (required)
     * @return DeleteItemByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully deleted an item </td><td>  -  </td></tr>
     </table>
     */
    public DeleteItemByIdRequestBuilder deleteItemById(String vaultUuid, String itemUuid) throws IllegalArgumentException {
        if (vaultUuid == null) throw new IllegalArgumentException("\"vaultUuid\" is required but got null");
            

        if (itemUuid == null) throw new IllegalArgumentException("\"itemUuid\" is required but got null");
            

        return new DeleteItemByIdRequestBuilder(vaultUuid, itemUuid);
    }
    private okhttp3.Call getAllCall(String vaultUuid, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vaults/{vaultUuid}/items"
            .replace("{" + "vaultUuid" + "}", localVarApiClient.escapeString(vaultUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ConnectToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllValidateBeforeCall(String vaultUuid, String filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vaultUuid' is set
        if (vaultUuid == null) {
            throw new ApiException("Missing the required parameter 'vaultUuid' when calling getAll(Async)");
        }

        return getAllCall(vaultUuid, filter, _callback);

    }


    private ApiResponse<List<Item>> getAllWithHttpInfo(String vaultUuid, String filter) throws ApiException {
        okhttp3.Call localVarCall = getAllValidateBeforeCall(vaultUuid, filter, null);
        Type localVarReturnType = new TypeToken<List<Item>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllAsync(String vaultUuid, String filter, final ApiCallback<List<Item>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllValidateBeforeCall(vaultUuid, filter, _callback);
        Type localVarReturnType = new TypeToken<List<Item>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllRequestBuilder {
        private final String vaultUuid;
        private String filter;

        private GetAllRequestBuilder(String vaultUuid) {
            this.vaultUuid = vaultUuid;
        }

        /**
         * Set filter
         * @param filter Filter the Item collection based on Item name using SCIM eq filter (optional)
         * @return GetAllRequestBuilder
         */
        public GetAllRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Build call for getAll
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllCall(vaultUuid, filter, _callback);
        }


        /**
         * Execute getAll request
         * @return List&lt;Item&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public List<Item> execute() throws ApiException {
            ApiResponse<List<Item>> localVarResp = getAllWithHttpInfo(vaultUuid, filter);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAll request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Item&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Item>> executeWithHttpInfo() throws ApiException {
            return getAllWithHttpInfo(vaultUuid, filter);
        }

        /**
         * Execute getAll request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Item>> _callback) throws ApiException {
            return getAllAsync(vaultUuid, filter, _callback);
        }
    }

    /**
     * Get all items for inside a Vault
     * 
     * @param vaultUuid The UUID of the Vault to fetch Items from (required)
     * @return GetAllRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetAllRequestBuilder getAll(String vaultUuid) throws IllegalArgumentException {
        if (vaultUuid == null) throw new IllegalArgumentException("\"vaultUuid\" is required but got null");
            

        return new GetAllRequestBuilder(vaultUuid);
    }
    private okhttp3.Call getDetailsByIdCall(String vaultUuid, String itemUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/vaults/{vaultUuid}/items/{itemUuid}"
            .replace("{" + "vaultUuid" + "}", localVarApiClient.escapeString(vaultUuid.toString()))
            .replace("{" + "itemUuid" + "}", localVarApiClient.escapeString(itemUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ConnectToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDetailsByIdValidateBeforeCall(String vaultUuid, String itemUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vaultUuid' is set
        if (vaultUuid == null) {
            throw new ApiException("Missing the required parameter 'vaultUuid' when calling getDetailsById(Async)");
        }

        // verify the required parameter 'itemUuid' is set
        if (itemUuid == null) {
            throw new ApiException("Missing the required parameter 'itemUuid' when calling getDetailsById(Async)");
        }

        return getDetailsByIdCall(vaultUuid, itemUuid, _callback);

    }


    private ApiResponse<FullItem> getDetailsByIdWithHttpInfo(String vaultUuid, String itemUuid) throws ApiException {
        okhttp3.Call localVarCall = getDetailsByIdValidateBeforeCall(vaultUuid, itemUuid, null);
        Type localVarReturnType = new TypeToken<FullItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDetailsByIdAsync(String vaultUuid, String itemUuid, final ApiCallback<FullItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDetailsByIdValidateBeforeCall(vaultUuid, itemUuid, _callback);
        Type localVarReturnType = new TypeToken<FullItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDetailsByIdRequestBuilder {
        private final String vaultUuid;
        private final String itemUuid;

        private GetDetailsByIdRequestBuilder(String vaultUuid, String itemUuid) {
            this.vaultUuid = vaultUuid;
            this.itemUuid = itemUuid;
        }

        /**
         * Build call for getDetailsById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDetailsByIdCall(vaultUuid, itemUuid, _callback);
        }


        /**
         * Execute getDetailsById request
         * @return FullItem
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public FullItem execute() throws ApiException {
            ApiResponse<FullItem> localVarResp = getDetailsByIdWithHttpInfo(vaultUuid, itemUuid);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDetailsById request with HTTP info returned
         * @return ApiResponse&lt;FullItem&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FullItem> executeWithHttpInfo() throws ApiException {
            return getDetailsByIdWithHttpInfo(vaultUuid, itemUuid);
        }

        /**
         * Execute getDetailsById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FullItem> _callback) throws ApiException {
            return getDetailsByIdAsync(vaultUuid, itemUuid, _callback);
        }
    }

    /**
     * Get the details of an Item
     * 
     * @param vaultUuid The UUID of the Vault to fetch Item from (required)
     * @param itemUuid The UUID of the Item to fetch (required)
     * @return GetDetailsByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetDetailsByIdRequestBuilder getDetailsById(String vaultUuid, String itemUuid) throws IllegalArgumentException {
        if (vaultUuid == null) throw new IllegalArgumentException("\"vaultUuid\" is required but got null");
            

        if (itemUuid == null) throw new IllegalArgumentException("\"itemUuid\" is required but got null");
            

        return new GetDetailsByIdRequestBuilder(vaultUuid, itemUuid);
    }
    private okhttp3.Call updateItemDetailsCall(String vaultUuid, String itemUuid, FullItem fullItem, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = fullItem;

        // create path and map variables
        String localVarPath = "/vaults/{vaultUuid}/items/{itemUuid}"
            .replace("{" + "vaultUuid" + "}", localVarApiClient.escapeString(vaultUuid.toString()))
            .replace("{" + "itemUuid" + "}", localVarApiClient.escapeString(itemUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ConnectToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateItemDetailsValidateBeforeCall(String vaultUuid, String itemUuid, FullItem fullItem, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vaultUuid' is set
        if (vaultUuid == null) {
            throw new ApiException("Missing the required parameter 'vaultUuid' when calling updateItemDetails(Async)");
        }

        // verify the required parameter 'itemUuid' is set
        if (itemUuid == null) {
            throw new ApiException("Missing the required parameter 'itemUuid' when calling updateItemDetails(Async)");
        }

        return updateItemDetailsCall(vaultUuid, itemUuid, fullItem, _callback);

    }


    private ApiResponse<FullItem> updateItemDetailsWithHttpInfo(String vaultUuid, String itemUuid, FullItem fullItem) throws ApiException {
        okhttp3.Call localVarCall = updateItemDetailsValidateBeforeCall(vaultUuid, itemUuid, fullItem, null);
        Type localVarReturnType = new TypeToken<FullItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateItemDetailsAsync(String vaultUuid, String itemUuid, FullItem fullItem, final ApiCallback<FullItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateItemDetailsValidateBeforeCall(vaultUuid, itemUuid, fullItem, _callback);
        Type localVarReturnType = new TypeToken<FullItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateItemDetailsRequestBuilder {
        private final String vaultUuid;
        private final String itemUuid;
        private List<String> tags;
        private String title;
        private Integer version;
        private String id;
        private ItemVault vault;
        private String category;
        private List<ItemUrlsInner> urls;
        private Boolean favorite;
        private String state;
        private OffsetDateTime createdAt;
        private OffsetDateTime updatedAt;
        private String lastEditedBy;
        private List<FullItemAllOfSections> sections;
        private List<Field> fields;
        private List<ModelFile> files;

        private UpdateItemDetailsRequestBuilder(String vaultUuid, String itemUuid) {
            this.vaultUuid = vaultUuid;
            this.itemUuid = itemUuid;
        }

        /**
         * Set tags
         * @param tags  (optional)
         * @return UpdateItemDetailsRequestBuilder
         */
        public UpdateItemDetailsRequestBuilder tags(List<String> tags) {
            this.tags = tags;
            return this;
        }
        
        /**
         * Set title
         * @param title  (optional)
         * @return UpdateItemDetailsRequestBuilder
         */
        public UpdateItemDetailsRequestBuilder title(String title) {
            this.title = title;
            return this;
        }
        
        /**
         * Set version
         * @param version  (optional)
         * @return UpdateItemDetailsRequestBuilder
         */
        public UpdateItemDetailsRequestBuilder version(Integer version) {
            this.version = version;
            return this;
        }
        
        /**
         * Set id
         * @param id  (optional)
         * @return UpdateItemDetailsRequestBuilder
         */
        public UpdateItemDetailsRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set vault
         * @param vault  (optional)
         * @return UpdateItemDetailsRequestBuilder
         */
        public UpdateItemDetailsRequestBuilder vault(ItemVault vault) {
            this.vault = vault;
            return this;
        }
        
        /**
         * Set category
         * @param category  (optional)
         * @return UpdateItemDetailsRequestBuilder
         */
        public UpdateItemDetailsRequestBuilder category(String category) {
            this.category = category;
            return this;
        }
        
        /**
         * Set urls
         * @param urls  (optional)
         * @return UpdateItemDetailsRequestBuilder
         */
        public UpdateItemDetailsRequestBuilder urls(List<ItemUrlsInner> urls) {
            this.urls = urls;
            return this;
        }
        
        /**
         * Set favorite
         * @param favorite  (optional, default to false)
         * @return UpdateItemDetailsRequestBuilder
         */
        public UpdateItemDetailsRequestBuilder favorite(Boolean favorite) {
            this.favorite = favorite;
            return this;
        }
        
        /**
         * Set state
         * @param state  (optional)
         * @return UpdateItemDetailsRequestBuilder
         */
        public UpdateItemDetailsRequestBuilder state(String state) {
            this.state = state;
            return this;
        }
        
        /**
         * Set createdAt
         * @param createdAt  (optional)
         * @return UpdateItemDetailsRequestBuilder
         */
        public UpdateItemDetailsRequestBuilder createdAt(OffsetDateTime createdAt) {
            this.createdAt = createdAt;
            return this;
        }
        
        /**
         * Set updatedAt
         * @param updatedAt  (optional)
         * @return UpdateItemDetailsRequestBuilder
         */
        public UpdateItemDetailsRequestBuilder updatedAt(OffsetDateTime updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }
        
        /**
         * Set lastEditedBy
         * @param lastEditedBy  (optional)
         * @return UpdateItemDetailsRequestBuilder
         */
        public UpdateItemDetailsRequestBuilder lastEditedBy(String lastEditedBy) {
            this.lastEditedBy = lastEditedBy;
            return this;
        }
        
        /**
         * Set sections
         * @param sections  (optional)
         * @return UpdateItemDetailsRequestBuilder
         */
        public UpdateItemDetailsRequestBuilder sections(List<FullItemAllOfSections> sections) {
            this.sections = sections;
            return this;
        }
        
        /**
         * Set fields
         * @param fields  (optional)
         * @return UpdateItemDetailsRequestBuilder
         */
        public UpdateItemDetailsRequestBuilder fields(List<Field> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set files
         * @param files  (optional)
         * @return UpdateItemDetailsRequestBuilder
         */
        public UpdateItemDetailsRequestBuilder files(List<ModelFile> files) {
            this.files = files;
            return this;
        }
        
        /**
         * Build call for updateItemDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            FullItem fullItem = buildBodyParams();
            return updateItemDetailsCall(vaultUuid, itemUuid, fullItem, _callback);
        }

        private FullItem buildBodyParams() {
            FullItem fullItem = new FullItem();
            return fullItem;
        }

        /**
         * Execute updateItemDetails request
         * @return FullItem
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public FullItem execute() throws ApiException {
            FullItem fullItem = buildBodyParams();
            ApiResponse<FullItem> localVarResp = updateItemDetailsWithHttpInfo(vaultUuid, itemUuid, fullItem);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateItemDetails request with HTTP info returned
         * @return ApiResponse&lt;FullItem&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FullItem> executeWithHttpInfo() throws ApiException {
            FullItem fullItem = buildBodyParams();
            return updateItemDetailsWithHttpInfo(vaultUuid, itemUuid, fullItem);
        }

        /**
         * Execute updateItemDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FullItem> _callback) throws ApiException {
            FullItem fullItem = buildBodyParams();
            return updateItemDetailsAsync(vaultUuid, itemUuid, fullItem, _callback);
        }
    }

    /**
     * Update an Item
     * 
     * @param vaultUuid The UUID of the Item&#39;s Vault (required)
     * @param itemUuid The UUID of the Item to update (required)
     * @return UpdateItemDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public UpdateItemDetailsRequestBuilder updateItemDetails(String vaultUuid, String itemUuid) throws IllegalArgumentException {
        if (vaultUuid == null) throw new IllegalArgumentException("\"vaultUuid\" is required but got null");
            

        if (itemUuid == null) throw new IllegalArgumentException("\"itemUuid\" is required but got null");
            

        return new UpdateItemDetailsRequestBuilder(vaultUuid, itemUuid);
    }
    private okhttp3.Call updateSubsetAttributesCall(String vaultUuid, String itemUuid, List<PatchInner> patchInner, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchInner;

        // create path and map variables
        String localVarPath = "/vaults/{vaultUuid}/items/{itemUuid}"
            .replace("{" + "vaultUuid" + "}", localVarApiClient.escapeString(vaultUuid.toString()))
            .replace("{" + "itemUuid" + "}", localVarApiClient.escapeString(itemUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ConnectToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSubsetAttributesValidateBeforeCall(String vaultUuid, String itemUuid, List<PatchInner> patchInner, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vaultUuid' is set
        if (vaultUuid == null) {
            throw new ApiException("Missing the required parameter 'vaultUuid' when calling updateSubsetAttributes(Async)");
        }

        // verify the required parameter 'itemUuid' is set
        if (itemUuid == null) {
            throw new ApiException("Missing the required parameter 'itemUuid' when calling updateSubsetAttributes(Async)");
        }

        return updateSubsetAttributesCall(vaultUuid, itemUuid, patchInner, _callback);

    }


    private ApiResponse<FullItem> updateSubsetAttributesWithHttpInfo(String vaultUuid, String itemUuid, List<PatchInner> patchInner) throws ApiException {
        okhttp3.Call localVarCall = updateSubsetAttributesValidateBeforeCall(vaultUuid, itemUuid, patchInner, null);
        Type localVarReturnType = new TypeToken<FullItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateSubsetAttributesAsync(String vaultUuid, String itemUuid, List<PatchInner> patchInner, final ApiCallback<FullItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSubsetAttributesValidateBeforeCall(vaultUuid, itemUuid, patchInner, _callback);
        Type localVarReturnType = new TypeToken<FullItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateSubsetAttributesRequestBuilder {
        private final String vaultUuid;
        private final String itemUuid;
        private List<PatchInner> patchInner;

        private UpdateSubsetAttributesRequestBuilder(String vaultUuid, String itemUuid) {
            this.vaultUuid = vaultUuid;
            this.itemUuid = itemUuid;
        }

        /**
         * Set patchInner
         * @param patchInner  (optional)
         * @return UpdateSubsetAttributesRequestBuilder
         */
        public UpdateSubsetAttributesRequestBuilder patchInner(List<PatchInner> patchInner) {
            this.patchInner = patchInner;
            return this;
        }

        /**
         * Build call for updateSubsetAttributes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK - Item updated. If no Patch operations were provided, Item is unmodified. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            List<PatchInner> patchInner = buildBodyParams();
            return updateSubsetAttributesCall(vaultUuid, itemUuid, patchInner, _callback);
        }

        private List<PatchInner> buildBodyParams() {
            return this.patchInner;
        }

        /**
         * Execute updateSubsetAttributes request
         * @return FullItem
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK - Item updated. If no Patch operations were provided, Item is unmodified. </td><td>  -  </td></tr>
         </table>
         */
        public FullItem execute() throws ApiException {
            List<PatchInner> patchInner = buildBodyParams();
            ApiResponse<FullItem> localVarResp = updateSubsetAttributesWithHttpInfo(vaultUuid, itemUuid, patchInner);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateSubsetAttributes request with HTTP info returned
         * @return ApiResponse&lt;FullItem&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK - Item updated. If no Patch operations were provided, Item is unmodified. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FullItem> executeWithHttpInfo() throws ApiException {
            List<PatchInner> patchInner = buildBodyParams();
            return updateSubsetAttributesWithHttpInfo(vaultUuid, itemUuid, patchInner);
        }

        /**
         * Execute updateSubsetAttributes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK - Item updated. If no Patch operations were provided, Item is unmodified. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FullItem> _callback) throws ApiException {
            List<PatchInner> patchInner = buildBodyParams();
            return updateSubsetAttributesAsync(vaultUuid, itemUuid, patchInner, _callback);
        }
    }

    /**
     * Update a subset of Item attributes
     * Applies a modified [RFC6902 JSON Patch](https://tools.ietf.org/html/rfc6902) document to an Item or ItemField. This endpoint only supports &#x60;add&#x60;, &#x60;remove&#x60; and &#x60;replace&#x60; operations.  When modifying a specific ItemField, the ItemField&#39;s ID in the &#x60;path&#x60; attribute of the operation object: &#x60;/fields/{fieldId}&#x60; 
     * @param vaultUuid The UUID of the Vault the item is in (required)
     * @param itemUuid The UUID of the Item to update (required)
     * @return UpdateSubsetAttributesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Item updated. If no Patch operations were provided, Item is unmodified. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateSubsetAttributesRequestBuilder updateSubsetAttributes(String vaultUuid, String itemUuid) throws IllegalArgumentException {
        if (vaultUuid == null) throw new IllegalArgumentException("\"vaultUuid\" is required but got null");
            

        if (itemUuid == null) throw new IllegalArgumentException("\"itemUuid\" is required but got null");
            

        return new UpdateSubsetAttributesRequestBuilder(vaultUuid, itemUuid);
    }
}
